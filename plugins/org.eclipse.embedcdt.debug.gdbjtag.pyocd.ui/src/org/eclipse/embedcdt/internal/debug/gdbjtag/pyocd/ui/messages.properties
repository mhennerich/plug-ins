###############################################################################
# Copyright (c) 2008-2010 QNX Software Systems and others.
#
# This program and the accompanying materials
# are made available under the terms of the Eclipse Public License 2.0
# which accompanies this distribution, and is available at
# https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#
# Contributors:
#   QNX Software Systems - initial API and implementation
#   Bruce Griffith,Sage Electronic Engineering, LLC - bug 305943
#               - API generalization to become transport-independent (e.g. to
#                 allow connections via serial ports and pipes).
#   Liviu Ionescu - Arm version
#	Chris Reed - pyocd updates
###############################################################################


##### DebuggerTab #####
DebuggerTab.interfaceGroup_Text=Debug Options

DebuggerTab.noReset_Text=Connect to running target
DebuggerTab.noReset_ToolTipText=\
Start pyOCD without issuing a reset,\n\
initialising the registers or programming\n\
the flash. This is useful to connect to a\n\
running device that was not started via\n\
the debugger.

DebuggerTab.gdbServerGroup_Text=pyOCD Setup

DebuggerTab.doStartGdbServer_Text=Start pyOCD locally
DebuggerTab.doStartGdbServer_ToolTipText=\
Automatically start/stop pyOCD as a GDB\n\
server locally for each debug session.\n\
The alternate way is to start the server\n\
manually and to keep it running continuously,\n\
either locally or on a remote machine.

DebuggerTab.gdbServerExecutable_Label=Executable path:
DebuggerTab.gdbServerExecutable_ToolTipText=\
The pyOCD executable, usually\n\
${pyocd_path}/${pyocd_executable}. Be sure\n\
you define the pyocd_path properly in the\n\
MCU preferences.

DebuggerTab.gdbServerExecutableBrowse=Browse...
DebuggerTab.gdbServerExecutableBrowse_Title=Select pyOCD Binary
DebuggerTab.gdbServerExecutableVariable=Variables...

DebuggerTab.gdbServerActualPath_Label=Actual executable:
DebuggerTab.gdbServerActualPath_link=\
(to change it use the <a>global</a> or <a>workspace</a> \
preferences pages or the <a>project</a> properties page)

DebuggerTab.gdbServerProbeId_Label=Debug probe:
DebuggerTab.gdbServerProbeId_ToolTipText=\
Select the debug probe this launch configuration should \
use for debugging.

# %s parameter is the probe's unique ID
DebuggerTab.gdbServerUnconnectedProbe=[Unconnected probe] (%s)
DebuggerTab.gdbServerSelectProbe=<Please select a debug probe>

DebuggerTab.gdbServerRefreshProbes_Label=Refresh

DebuggerTab.gdbServerRefreshing_Label=Loading\u2026

DebuggerTab.gdbServerGdbPort_Label=GDB port:
DebuggerTab.gdbServerGdbPort_ToolTipText=\
The port on which the pyOCD GDB Server\n\
should listen for an incoming connection\n\
from the GDB client (default 3333).

DebuggerTab.gdbServerTelnetPort_Label=Semihosting port:
DebuggerTab.gdbServerTelnetPort_ToolTipText=\
The port on which pyOCD should listen for\n\
an incoming connection that allows access to\n\
the internal monitor (default 4444).

DebuggerTab.gdbServerLog_Label=Log file:
DebuggerTab.gdbServerLogBrowse_Button=Browse...
DebuggerTab.gdbServerLogBrowse_Title=Select where to store the log file

DebuggerTab.gdbServerBusSpeed_Label=Bus speed:
DebuggerTab.gdbServerBusSpeed_ToolTipText=\
The SWD/JTAG bus frequency in Hertz.

DebuggerTab.gdbServerBusSpeedUnits_Label=Hz

DebuggerTab.gdbServerOverrideTarget_Label=Override target:
DebuggerTab.gdbServerOverrideTarget_ToolTipText=\
When enabled, the target device type is set to the target type selected \
with the combo box. If not enabled, the default target type \
shown above is used. Setting the target type is required when using \
standalone debug probes or on-board probes types such as J-Link \
that do not report the connected target type.

DebuggerTab.gdbServerTargetName_ToolTipText=\
Select a device part number from the pull-down menu to manually specify the \
target type. A custom value may also be entered in the field; this must \
be the short target type name like those shown in parentheses in \
the pull-down menu. Setting the target type is required when using \
standalone debug probes or on-board probes types such as J-Link \
that do not report the connected target type.\
To install more targets, use the 'pyocd pack' subcommand from the \
command line.

DebuggerTab.gdbServerDefaultTargetType_Label=Default target:
DebuggerTab.gdbServerDefaultTargetType_ToolTipText=\
This is the target that will be used if the "Override target" \
setting is not enabled.

DebuggerTab.gdbServerConnectMode_Label=Connect mode:
DebuggerTab.gdbServerConnectMode_ToolTipText=\
Select how pyocd connects to the target.\n\n\
"Halt": Stop all cores after connecting.\n\
"Pre-reset": Like "Halt", but issue a hardware reset before connecting.\n\
"Under reset": Like "Halt", but hold hardware reset asserted during the \
connect sequence. This is often required to gain control of devices that \
are in low power states or powered down. Not all devices support connecting \
under reset.\n\
"Attach": Connect to a running system without disturbing it or stopping \
any cores. This only makes sense if you also configure the Startup tab \
to not load code and disable the pre-run reset.\n

DebuggerTab.gdbServerConnectMode.Halt=Halt
DebuggerTab.gdbServerConnectMode.PreReset=Pre-reset
DebuggerTab.gdbServerConnectMode.UnderReset=Under reset
DebuggerTab.gdbServerConnectMode.Attach=Attach

DebuggerTab.gdbServerResetType_Label=Reset type:
DebuggerTab.gdbServerResetType_ToolTipText=\
Method used to reset the target. Not all reset types are applicable \
to all devices.\n\n\
"Default": Use default reset type for the target.\n\
"Hardware": Reset using the nRESET hardware signal.\n\
"Software (Default)": Use default software reset type for the target.\n\
"Software (SYSRESETREQ)": Use Cortex-M AIRCR.SYSRESETREQ register.\n\
"Software (VECTRESET)":  Use Cortex-M AICR.VECTRESET register. Only \
available on v7-M cores.\n\
"Software (emulated)": Setting core registers to reset values.

DebuggerTab.gdbServerResetType.Default=Default
DebuggerTab.gdbServerResetType.Hardware=Hardware
DebuggerTab.gdbServerResetType.SoftwareDefault=Software (Default)
DebuggerTab.gdbServerResetType.SoftwareSysResetReq=Software (SYSRESETREQ)
DebuggerTab.gdbServerResetType.SoftwareVectReset=Software (VECTRESET)
DebuggerTab.gdbServerResetType.SoftwareEmulated=Software (Emulated)

DebuggerTab.gdbServerHaltAtHardFault_Label=Halt at hard fault
DebuggerTab.gdbServerHaltAtHardFault_ToolTipText=\
Halt at hard fault

DebuggerTab.gdbServerStepIntoInterrupts_Label=Step into interrupts
DebuggerTab.gdbServerStepIntoInterrupts_ToolTipText=\
Step into interrupts

DebuggerTab.gdbServerFlashMode_Label=Flash mode:
DebuggerTab.gdbServerFlashMode_ToolTipText=\
Mode of operation for writing to flash. \
"Auto" uses either chip or sector erase based on which should be fastest.

DebuggerTab.gdbServerFlashMode.AutoErase=Auto
DebuggerTab.gdbServerFlashMode.ChipErase=Chip erase
DebuggerTab.gdbServerFlashMode.SectorErase=Sector erase

DebuggerTab.gdbServerSmartFlash_Label=Smart flash
DebuggerTab.gdbServerSmartFlash_ToolTipText=\
Attempt to improve flash programming performance by only \
programming those flash pages that have changed.

DebuggerTab.gdbServerEnableSemihosting_Label=Enable semihosting
DebuggerTab.gdbServerEnableSemihosting_ToolTipText=

DebuggerTab.gdbServerUseGdbSyscallsForSemihosting_Label=Use GDB syscalls for semihosting
DebuggerTab.gdbServerUseGdbSyscallsForSemihosting_ToolTipText=\
Pass semihosting requests to GDB instead of handling \
them directly in pyOCD.

DebuggerTab.gdbServerOther_Label=Other options:
DebuggerTab.gdbServerOther_ToolTipText=\
Optional field, listing additional command line \
arguments passed to pyocd. The additional arguments \
are appended to the end of the command line. Arguments \
can be space separated and/or placed on separate lines.

DebuggerTab.gdbServerAllocateConsole_Label=Allocate console for pyOCD
DebuggerTab.gdbServerAllocateConsole_ToolTipText=\
Allocate an Eclipse console where the output\n\
generated by pyOCD will be displayed.

DebuggerTab.gdbServerAllocateTelnetConsole_Label=Allocate console for semihosting
DebuggerTab.gdbServerAllocateTelnetConsole_ToolTipText=\
Allocate an Eclipse console where the trace\n\
messages generated by the semihosting output\n\
will be displayed.

DebuggerTab.gdbSetupGroup_Text=GDB Client Setup

DebuggerTab.gdbCommand_Label=Executable name:
DebuggerTab.gdbCommand_ToolTipText=\
The GDB client executable, for example\n\
${cross_prefix}gdb${cross_suffix}. The\n\
substitution is done using the project\n\
macros and toolchain path.

DebuggerTab.gdbCommandBrowse=Browse...
DebuggerTab.gdbCommandBrowse_Title=Select GDB Client Binary
DebuggerTab.gdbCommandVariable=Variables...

DebuggerTab.gdbCommandActualPath_Label=Actual executable:

DebuggerTab.gdbOtherOptions_Label=Other options:
DebuggerTab.gdbOtherOptions_ToolTipText=\
Additional command line options to be passed\n\
to the GDB client. They are added to the\n\
mandatory '--interpreter=mi2 --nx' passed first.

DebuggerTab.gdbOtherCommands_Label=Commands:
DebuggerTab.gdbOtherCommands_ToolTipText=\
Additional commands that can be passed to the\n\
GDB client. They are executed just before\n\
the eventual .gdbinit. Other useful commands\n\
are: 'set debug remote 1', 'set\n\
remotetimeout 20'.

DebuggerTab.remoteGroup_Text=Remote Target
DebuggerTab.ipAddressLabel=Host name or IP address:
DebuggerTab.portNumberLabel=Port number:


DebuggerTab.update_thread_list_on_suspend_Text=Force thread list update on suspend
DebuggerTab.update_thread_list_on_suspend_ToolTipText=\
This checkbox controls whether the CDT\n\
debugger will ask gdb for the target\n\
program's thread list on each suspend\n\
event (breakpoint-hit, step, etc). Normally,\n\
this isn't necessary, as GDB sends\n\
notifications in realtime when a thread is\n\
created or destroyed. However, some\n\
lightweight GDB remote stubs won't\n\
send these notifications. As such, the\n\
CDT debugger doesn't find out about\n\
new or destroyed threads unless it polls\n\
gdb. Turn on this option if you are\n\
debugging such a target (typically an\n\
embedded one).

# Also used by StartupTab.
DebuggerTab.restoreDefaults_Link=<a>Restore defaults</a>
DebuggerTab.restoreDefaults_ToolTipText=\
Restore all fields to their default values.\n\
Current values will be lost.

DebuggerTab.loading_data_from_pyocd=Loading data from pyOCD\u2026

# Errors
DebuggerTab.invalid_pyocd_executable=pyOCD tool not found where specified
DebuggerTab.old_pyocd_executable=pyOCD tool is too old; please use version 0.14.0 or later
DebuggerTab.probes_failure_parsing_output=Failed to parse pyOCD probes output
DebuggerTab.probes_failure_invoking_pyocd=Error calling pyOCD to get probes
DebuggerTab.probes_pyocd_timeout=pyOCD timed out while retrieving probes
DebuggerTab.targets_failure_parsing_output=Failed to parse pyOCD targets output
DebuggerTab.targets_failure_invoking_pyocd=Error calling pyOCD to get targets
DebuggerTab.targets_pyocd_timeout=pyOCD timed out while retrieving targets
DebuggerTab.invalid_gdbserver_port=pyOCD gdbserver port not specified
DebuggerTab.invalid_telnet_port=pyOCD telnet port not specified
DebuggerTab.invalid_gdbclient_executable=GDB path not specified


##### StartupTab #####
StartupTab.initGroup_Text=Initialization Commands

StartupTab.doFirstReset_Text=Initial Reset.
StartupTab.doFirstReset_ToolTipText=\
Perform an initial reset and halt; this will\n\
take the processor out of whatever state it\n\
was and prepare it for programming the flash.\n\
Normally the GDB server performs a reset\n\
when starting, so this is especially useful\n\
when a specific reset type is required. It\n\
is disabled when the 'Connect to running'\n\
option is used. The generated command is\n\
'monitor reset <type>'.

StartupTab.firstResetType_Text=Type:
StartupTab.firstResetType_ToolTipText=\
Can be one of: 'run' Let the target run,\n\
'halt' Immediately halt the target, 'init'\n\
Immediately halt the target, and execute\n\
the reset-init script. The default is 'init'.

StartupTab.initCommands_ToolTipText=\
Additional or alternate initialisation\n\
commands. To reach the GDB server, the\n\
commands should be prefixed with 'monitor'.

StartupTab.enableSemihosting_Text=Enable Arm semihosting
StartupTab.enableSemihosting_ToolTipText=\
Enable support for semihosting. In addition\n\
to full semihosting test applications, this\n\
is also needed to display debug trace\n\
messages in retargeted applications. The\n\
trace messages are routed to the GDB client\n\
console. The generated command is\n\
'monitor arm semihosting enable'.

StartupTab.loadGroup_Text=Load Symbols and Executable
StartupTab.loadImage_Text=Load executable

StartupTab.useProjectBinary_Label=Use project binary:
StartupTab.useProjectBinary_ToolTipText=Use C/C++ application specified in the Main tab.

StartupTab.useFile_Label=Use file:
StartupTab.FileBrowseWs_Label=Workspace...
StartupTab.FileBrowse_Label=File System...
StartupTab.imageOffsetLabel_Text=Executable offset (hex):
StartupTab.symbolsOffsetLabel_Text=Symbols offset (hex):

StartupTab.loadSymbols_Text=Load symbols

StartupTab.imageFileBrowseWs_Title=Select executable file
StartupTab.imageFileBrowse_Title=Select executable file

StartupTab.symbolsFileBrowseWs_Title=Select symbols file
StartupTab.symbolsFileBrowse_Title=Select symbols file

StartupTab.runOptionGroup_Text=Runtime Options
StartupTab.setPcRegister_Text=Set program counter at (hex):
StartupTab.setStopAt_Text=Set breakpoint at:
StartupTab.setResume_Text=Resume

StartupTab.doDebugInRam_Text=Debug in RAM
StartupTab.doDebugInRam_ToolTipText=\
Load the executable and run the entire\n\
debug session in RAM. The main effect\n\
is that the executable will be loaded\n\
after each reset/restart, not only\n\
once after the initial reset.

StartupTab.runGroup_Text=Run/Restart Commands

StartupTab.doSecondReset_Text=Pre-run/Restart reset
StartupTab.doSecondReset_ToolTipText=\
Perform a second reset; this will\n\
prepare the processor to start execution\n\
from a known state. It is disabled when the\n\
'Connect to running' option is used.\n\
It is always performed at Restart.\n\
The generated command is\n\
'monitor reset <type>'.

StartupTab.secondResetType_Text=Type:
StartupTab.secondResetType_ToolTipText=\
Can be one of: 'run' Let the target run,\n\
'halt' Immediately halt the target, 'init'\n\
Immediately halt the target, and execute\n\
the reset-init script. The default is 'halt'.

StartupTab.secondResetWarning_Text=(always executed at Restart)

StartupTab.setPcRegister_ToolTipText=\
Set the PC to a different address than\n\
the Reset address. The generated command\n\
is 'set $pc=0x<value>'.

StartupTab.pcRegister_ToolTipText=\
A hex address (no 0x prefix required).

StartupTab.setStopAt_ToolTipText=\
Set a temporary breakpoint at the given\n\
symbol. The generated command is\n\
'tbreak <symbol>'.

#StartupTab.reload_Text=(Load/reload executable when debugging in RAM)

StartupTab.runCommands_ToolTipText=\
Additional or alternate commands to be\n\
send before starting execution.\n\
Example: set $sp=0xNNN.\n\
To reach the GDB server, the commands\n\
should be prefixed with 'monitor'.

StartupTab.doContinue_Text=Continue
StartupTab.doContinue_ToolTipText=\
Continue execution from the point where it\n\
was halted after reset.


StartupTab.imageFileName_not_specified=Image file name not specified
StartupTab.imageFileName_does_not_exist=Image file does not exist
StartupTab.imageOffset_not_specified=Image offset not specified
StartupTab.symbolsFileName_not_specified=Symbols file name not specified
StartupTab.symbolsFileName_does_not_exist=Symbols file does not exist
StartupTab.symbolsOffset_not_specified=Symbols offset not specified
StartupTab.pcRegister_not_specified=Program counter not specified
StartupTab.stopAt_not_specified=Breakpoint location not specified

StartupTab.FileBrowseWs_Message=Select a workspace resource

### legacy ### ----------------------------------------------------------------
GDBJtagStartupTab.initGroup_Text=Initialization Commands
GDBJtagStartupTab.doReset_Text=Reset and Delay (seconds):
GDBJtagStartupTab.doHalt_Text=Halt

GDBJtagStartupTab.loadGroup_Text=Load Image and Symbols
GDBJtagStartupTab.loadImage_Text=Load image
GDBJtagStartupTab.imageLabel_Text=Image file name:
GDBJtagStartupTab.imageFileBrowseWs_Title=Select image file
GDBJtagStartupTab.imageFileBrowse_Title=Select image file
GDBJtagStartupTab.imageOffsetLabel_Text=Image offset (hex):
GDBJtagStartupTab.FileBrowseWs_Label=Workspace...
GDBJtagStartupTab.FileBrowseWs_Message=Select a workspace resource
GDBJtagStartupTab.FileBrowse_Label=File System...
GDBJtagStartupTab.FileBrowse_Message=Select a file from file system
GDBJtagStartupTab.loadSymbols_Text=Load symbols
GDBJtagStartupTab.symbolsLabel_Text=Symbols file name:
GDBJtagStartupTab.symbolsFileBrowseWs_Title=Select symbols file
GDBJtagStartupTab.symbolsFileBrowse_Title=Select symbols file
GDBJtagStartupTab.symbolsOffsetLabel_Text=Symbols offset (hex):
GDBJtagStartupTab.useProjectBinary_Label=Use project binary:
GDBJtagStartupTab.useFile_Label=Use file:
GDBJtagStartupTab.useProjectBinary_ToolTip=Use C/C++ application specified in the Main tab.

GDBJtagStartupTab.runOptionGroup_Text=Runtime Options
GDBJtagStartupTab.setPcRegister_Text=Set program counter at (hex):
GDBJtagStartupTab.setStopAt_Text=Set breakpoint at:
GDBJtagStartupTab.setResume_Text=Resume

GDBJtagStartupTab.runGroup_Text=Run Commands

GDBJtagStartupTab.imageFileName_not_specified=Image file name not specified
GDBJtagStartupTab.imageFileName_does_not_exist=Image file does not exist
GDBJtagStartupTab.imageOffset_not_specified=Image offset not specified
GDBJtagStartupTab.symbolsFileName_not_specified=Symbols file name not specified
GDBJtagStartupTab.symbolsFileName_does_not_exist=Symbols file does not exist
GDBJtagStartupTab.symbolsOffset_not_specified=Symbols offset not specified
GDBJtagStartupTab.pcRegister_not_specified=Program counter not specified
GDBJtagStartupTab.stopAt_not_specified=Breakpoint location not specified

GDBJtagDebuggerTab.gdbSetupGroup_Text=GDB Client Setup
GDBJtagDebuggerTab.gdbCommandLabel=GDB Client Command:
GDBJtagDebuggerTab.gdbCommandBrowse=Browse...
GDBJtagDebuggerTab.gdbCommandBrowse_Title=Select GDB Client Binary
GDBJtagDebuggerTab.gdbCommandVariable=Variables...
GDBJtagDebuggerTab.commandFactoryLabel=Command Set:
GDBJtagDebuggerTab.miProtocolLabel=Protocol Version:
GDBJtagDebuggerTab.verboseModeLabel=Verbose console mode
GDBJtagDebuggerTab.remoteGroup_Text=Remote Target
GDBJtagDebuggerTab.useRemote_Text=Use remote target
GDBJtagDebuggerTab.jtagDeviceLabel=JTAG Device:
GDBJtagDebuggerTab.ipAddressLabel=Host name or IP address:
GDBJtagDebuggerTab.portNumberLabel=Port number:
GDBJtagDebuggerTab.connectionLabel=GDB Connection String:
GDBJtagDebuggerTab.update_thread_list_on_suspend=Force thread list update on suspend

# ---

ProjectMcuPagePropertyPage_description=\
Configure the location where pyOCD is installed. \
The values are stored in the workspace (not in the project). \
They are used for all build configurations of this project, \
and override the workspace or global paths. \n\
\n\
After installing pyOCD updates, restart Eclipse for the \
defaults to be re-evaluated and use the Restore Defaults \
button to configure the new location.\
\n

WorkspaceMcuPagePropertyPage_description=\
Configure the location where pyOCD is installed. \
The values are stored in the workspace and override the global paths. \
Unless redefined per project, they are used for all \
projects in this workspace. \n\
\n\
After installing pyOCD updates, restart Eclipse for the \
defaults to be re-evaluated and use the Restore Defaults \
button to configure the new location.\
\n

GlobalMcuPagePropertyPage_description=\
Configure the location where pyOCD is installed. \
The values are stored within Eclipse. \
Unless redefined more specifically, they are used for all \
projects in all workspaces. \n\
\n\
After installing pyOCD updates, restart Eclipse for the \
defaults to be re-evaluated and use the Restore Defaults \
button to configure the new location.\
\n

McuPage_executable_label=Executable:
McuPage_executable_folder=Folder:

